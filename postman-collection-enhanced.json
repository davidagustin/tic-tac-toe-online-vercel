{
  "info": {
    "name": "Tic-Tac-Toe Online API - Enhanced",
    "description": "Comprehensive API testing collection with edge cases, error scenarios, and advanced testing features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "username",
      "value": "testuser",
      "type": "string"
    },
    {
      "key": "password",
      "value": "testpass123",
      "type": "string"
    },
    {
      "key": "gameId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "testUsername1",
      "value": "player1",
      "type": "string"
    },
    {
      "key": "testUsername2",
      "value": "player2",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîç Health & Monitoring",
      "item": [
        {
          "name": "Health Check - Basic",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health-check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health-check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('checks');",
                  "    pm.expect(response.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test(\"All health checks are healthy\", function () {",
                  "    const response = pm.response.json();",
                  "    const checks = response.checks;",
                  "    pm.expect(checks.database.status).to.eql('healthy');",
                  "    pm.expect(checks.pusher.status).to.eql('healthy');",
                  "    pm.expect(checks.memory.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Health Check - With Headers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health-check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health-check"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Authentication - Comprehensive",
      "item": [
        {
          "name": "Register User - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.user).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User - Duplicate",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Duplicate registration handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 409, 400]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User - Invalid Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"\",\n  \"password\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid data rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('successful');",
                  "    pm.expect(response.user).to.have.property('username');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User - Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid credentials rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User - Non-existent User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistentuser\",\n  \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent user rejected\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Clear Auth",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/clear-auth",
              "host": ["{{baseUrl}}"],
              "path": ["api", "clear-auth"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Auth cleared successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üéÆ Game Management - Comprehensive",
      "item": [
        {
          "name": "List Games - Empty",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/game/list",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "list"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"List games successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('games');",
                  "    pm.expect(response.games).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Game - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameName\": \"Test Game\",\n  \"userName\": \"{{testUsername1}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "create"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Game created successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.game).to.have.property('id');",
                  "    pm.expect(response.game).to.have.property('name');",
                  "    pm.expect(response.game).to.have.property('status');",
                  "    ",
                  "    // Store game ID for future requests",
                  "    if (response.game && response.game.id) {",
                  "        pm.environment.set(\"gameId\", response.game.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Game - Invalid Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameName\": \"\",\n  \"userName\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "create"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid game data rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Join Game - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"{{gameId}}\",\n  \"userName\": \"{{testUsername2}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/join",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "join"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Game joined successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.game).to.have.property('player2');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Join Game - Non-existent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"nonexistent-game\",\n  \"userName\": \"{{testUsername2}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/join",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "join"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent game rejected\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Make Move - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"{{gameId}}\",\n  \"userName\": \"{{testUsername1}}\",\n  \"position\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Move made successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.game).to.have.property('board');",
                  "    pm.expect(response.game.board[0]).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Make Move - Invalid Position",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"{{gameId}}\",\n  \"userName\": \"{{testUsername1}}\",\n  \"position\": 10\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid position rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Make Move - Occupied Position",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"{{gameId}}\",\n  \"userName\": \"{{testUsername1}}\",\n  \"position\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Occupied position rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Score Update After Game",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/stats/{{testUsername1}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stats", "{{testUsername1}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Score updated after game\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    const stats = response.stats;",
                  "    ",
                  "    const initialWins = parseInt(pm.environment.get(\"initial_wins\"));",
                  "    const initialLosses = parseInt(pm.environment.get(\"initial_losses\"));",
                  "    const initialDraws = parseInt(pm.environment.get(\"initial_draws\"));",
                  "    const initialTotalGames = parseInt(pm.environment.get(\"initial_total_games\"));",
                  "    ",
                  "    // Verify stats structure",
                  "    pm.expect(stats).to.have.property('wins');",
                  "    pm.expect(stats).to.have.property('losses');",
                  "    pm.expect(stats).to.have.property('draws');",
                  "    pm.expect(stats).to.have.property('totalGames');",
                  "    pm.expect(stats).to.have.property('winRate');",
                  "    ",
                  "    // Verify logical consistency",
                  "    pm.expect(stats.totalGames).to.eql(stats.wins + stats.losses + stats.draws);",
                  "    pm.expect(stats.totalGames).to.be.at.least(initialTotalGames);",
                  "    ",
                  "    // Log the score changes",
                  "    console.log(`Score tracking verification:`);",
                  "    console.log(`  Initial: ${initialWins}W/${initialLosses}L/${initialDraws}D (${initialTotalGames} total)`);",
                  "    console.log(`  Current: ${stats.wins}W/${stats.losses}L/${stats.draws}D (${stats.totalGames} total)`);",
                  "    console.log(`  Win Rate: ${stats.winRate}%`);",
                  "    ",
                  "    // Verify win rate calculation",
                  "    if (stats.totalGames > 0) {",
                  "        const expectedWinRate = Math.round((stats.wins / stats.totalGames) * 100);",
                  "        pm.expect(stats.winRate).to.eql(expectedWinRate);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üì° Real-time Events - Advanced",
      "item": [
        {
          "name": "SSE Connection - Basic",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/event-stream"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events?channel=lobby",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"],
              "query": [
                {
                  "key": "channel",
                  "value": "lobby"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"SSE connection established\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/event-stream');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "SSE Connection - With LastEventId",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/event-stream"
              },
              {
                "key": "Cache-Control",
                "value": "no-cache"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/events?channel=lobby&lastEventId=123456",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"],
              "query": [
                {
                  "key": "channel",
                  "value": "lobby"
                },
                {
                  "key": "lastEventId",
                  "value": "123456"
                }
              ]
            }
          }
        },
        {
          "name": "Send Event - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"channel\": \"lobby\",\n  \"event\": \"test-message\",\n  \"data\": {\n    \"message\": \"Hello from Postman!\",\n    \"timestamp\": \"{{$timestamp}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Event sent successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Event - Invalid Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"channel\": \"\",\n  \"event\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid event data rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Event - Game Update",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"channel\": \"game-{{gameId}}\",\n  \"event\": \"game-update\",\n  \"data\": {\n    \"gameId\": \"{{gameId}}\",\n    \"action\": \"move\",\n    \"player\": \"{{testUsername1}}\",\n    \"position\": 0\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/events",
              "host": ["{{baseUrl}}"],
              "path": ["api", "events"]
            }
          }
        }
      ]
    },
    {
      "name": "üí¨ Chat System - Advanced",
      "item": [
        {
          "name": "Send Chat - Valid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"{{testUsername1}}\",\n  \"text\": \"Hello from Postman!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Chat message sent successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('text');",
                  "    pm.expect(response).to.have.property('user_name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Chat - Empty Message",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"{{testUsername1}}\",\n  \"text\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Empty message rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Chat Messages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Chat messages retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Statistics & Configuration",
      "item": [
        {
          "name": "Get User Stats - Valid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/stats/{{testUsername1}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stats", "{{testUsername1}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User stats retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('username');",
                  "    pm.expect(response).to.have.property('stats');",
                  "    ",
                  "    // Store initial stats for score tracking",
                  "    const stats = response.stats;",
                  "    pm.environment.set(\"initial_wins\", stats.wins || 0);",
                  "    pm.environment.set(\"initial_losses\", stats.losses || 0);",
                  "    pm.environment.set(\"initial_draws\", stats.draws || 0);",
                  "    pm.environment.set(\"initial_total_games\", stats.totalGames || 0);",
                  "    ",
                  "    console.log(`Initial stats for ${response.username}: ${JSON.stringify(stats)}`);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Stats - Non-existent",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/stats/nonexistentuser",
              "host": ["{{baseUrl}}"],
              "path": ["api", "stats", "nonexistentuser"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent user stats handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Pusher Config",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/pusher-config",
              "host": ["{{baseUrl}}"],
              "path": ["api", "pusher-config"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Pusher config retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('key');",
                  "    pm.expect(response).to.have.property('cluster');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Debug Environment",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/debug-env",
              "host": ["{{baseUrl}}"],
              "path": ["api", "debug-env"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Environment debug info retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('environment');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîå WebSocket & Edge Cases",
      "item": [
        {
          "name": "WebSocket Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/websocket?channel=test&clientId=postman",
              "host": ["{{baseUrl}}"],
              "path": ["api", "websocket"],
              "query": [
                {
                  "key": "channel",
                  "value": "test"
                },
                {
                  "key": "clientId",
                  "value": "postman"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"WebSocket endpoint responds\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Endpoint - 404",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "nonexistent"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid endpoint returns 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîÑ Load Testing",
      "item": [
        {
          "name": "Health Check - Load Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health-check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health-check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 1 second\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"Response size reasonable\", function () {",
                  "    pm.expect(pm.response.size().body).to.be.below(10000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "List Games - Load Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/game/list",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "list"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 2 seconds\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
} 