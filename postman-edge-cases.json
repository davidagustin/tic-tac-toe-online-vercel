{
  "info": {
    "name": "Tic-Tac-Toe API - Edge Cases & Security",
    "description": "Advanced testing scenarios including edge cases, security tests, and stress testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "maliciousInput",
      "value": "<script>alert('xss')</script>",
      "type": "string"
    },
    {
      "key": "longString",
      "value": "a".repeat(1000),
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîí Security Testing",
      "item": [
        {
          "name": "XSS Prevention - Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{maliciousInput}}\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"XSS in username handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "SQL Injection - Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"'; DROP TABLE users; --\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"SQL injection prevented\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 500]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "NoSQL Injection - JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": {\"$ne\": \"\"},\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"NoSQL injection prevented\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422, 401]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìè Input Validation",
      "item": [
        {
          "name": "Long Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{longString}}\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Long username rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Special Characters - Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"user@#$%^&*()\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Special characters handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 422]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unicode Characters",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"Áî®Êà∑ÊµãËØï\",\n  \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unicode characters handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 422]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "‚ö° Performance & Stress",
      "item": [
        {
          "name": "Concurrent Health Checks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health-check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health-check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test(\"Memory usage reasonable\", function () {",
                  "    const response = pm.response.json();",
                  "    if (response.checks && response.checks.memory) {",
                  "        const memoryUsage = response.checks.memory.usage;",
                  "        pm.expect(memoryUsage.heapUsed).to.be.below(100000000); // 100MB",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Large Payload - Chat",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userName\": \"testuser\",\n  \"text\": \"{{longString}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/chat",
              "host": ["{{baseUrl}}"],
              "path": ["api", "chat"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Large payload handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 413]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîÑ State Management",
      "item": [
        {
          "name": "Game State Consistency",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameName\": \"State Test Game\",\n  \"userName\": \"player1\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "create"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Game created with valid state\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.game.status).to.eql('waiting');",
                  "    pm.expect(response.game.board).to.be.an('array');",
                  "    pm.expect(response.game.board).to.have.length(9);",
                  "    ",
                  "    // Store game ID for subsequent tests",
                  "    if (response.game && response.game.id) {",
                  "        pm.environment.set(\"testGameId\", response.game.id);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Multiple Moves - State Check",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"{{testGameId}}\",\n  \"userName\": \"player1\",\n  \"position\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Move updates game state correctly\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.game.board[0]).to.not.be.empty;",
                  "    pm.expect(response.game.currentPlayer).to.not.eql('player1');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üåê Network & Connectivity",
      "item": [
        {
          "name": "CORS Headers",
          "request": {
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "https://example.com"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"CORS headers present\", function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Rate Limiting",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health-check",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health-check"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Rate limiting headers present\", function () {",
                  "    const headers = pm.response.headers;",
                  "    pm.expect(headers.has('X-RateLimit-Limit') || headers.has('Retry-After')).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîç Error Handling",
      "item": [
        {
          "name": "Malformed JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"testpass123\",\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Malformed JSON handled\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Wrong Content-Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "username=testuser&password=testpass123"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Wrong content type handled\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Missing Required Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Missing fields handled\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.include('required');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Data Validation",
      "item": [
        {
          "name": "Game Position Validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"test-game\",\n  \"userName\": \"player1\",\n  \"position\": -1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid position rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Game ID Format Validation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"gameId\": \"invalid-game-id-format\",\n  \"userName\": \"player1\",\n  \"position\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/game/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "game", "move"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid game ID format handled\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 422]);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
} 